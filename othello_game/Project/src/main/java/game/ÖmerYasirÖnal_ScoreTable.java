/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package game;

import javax.swing.*;
import java.awt.event.ActionEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import utilities.ÖmerYasirÖnal_UserManager;

/**
 *
 * @author omeryasironal
 */
public class ÖmerYasirÖnal_ScoreTable extends javax.swing.JFrame {

    private ÖmerYasirÖnal_UserManager userManager = new ÖmerYasirÖnal_UserManager();

    JFrame backFrame;
    ÖmerYasirÖnal_MyTableModel myTableModel = new ÖmerYasirÖnal_MyTableModel("scores.txt");

    public ÖmerYasirÖnal_ScoreTable(ÖmerYasirÖnal_StartPage startPage) {

        // Kullanıcının geldiği bir önceki sayfayı saklar
        backFrame = startPage;
        initComponents();
        setLocation(new java.awt.Point(300, 50));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    private void initComponents() {//GEN-BEGIN:initComponents

        jScrollPane1 = new javax.swing.JScrollPane();
        scoreTable = new javax.swing.JTable();
        deleteButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(400, 483));
        setPreferredSize(new java.awt.Dimension(400, 483));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        scoreTable.setModel(myTableModel);
        scoreTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(scoreTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 30, 314, 337));

        deleteButton.setBackground(new java.awt.Color(255, 0, 51));
        deleteButton.setText("sil");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(deleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 380, 220, 57));

        backButton.setText("Geri Dön");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });
        getContentPane().add(backButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 450, -1, -1));

        pack();
    }//GEN-END:initComponents


    private void deleteButtonActionPerformed(ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed

        // kullanıcının seçtiği satırın index'ini tutar
        int selectedRow = scoreTable.getSelectedRow();
        if (selectedRow >= 0) {

            /**
             * Bu method, silinmek istenen skor bilgisinin, silmek isteyen
             * kişiye ait olup olmadığı kontrol eder.
             */
            String email = JOptionPane.showInputDialog("Lütfen e-posta adresinizi girin:");
            String password = JOptionPane.showInputDialog("Lütfen şifrenizi girin:");
            String selectedCell = (String) scoreTable.getValueAt(selectedRow, 0);

            // Silinmek istenen, secili scorun sahibinin ismiyle User nesnesi oluşturur
            ÖmerYasirÖnal_User selectedUser = userManager.findUserByName(selectedCell);

            // Scorunu silmek isteyen kullanıcının maili ile User nesnesi oluşturur
            ÖmerYasirÖnal_User currentUser = userManager.findUserByEmail(email);

            // kullanıcılar oluşturulamazsa programın beklenmedik bir şekilde çalışmasını önlemek için kullanılır
            assert selectedUser != null;
            assert currentUser != null;
            boolean isSameUser = userManager.usersIsSame(selectedUser, currentUser);
            if (currentUser != null && currentUser.getPassword().equals(password) && isSameUser) {
                myTableModel.deleteRowFromFile(selectedRow);
                JOptionPane.showMessageDialog(null, "Skor başarıyla silindi.");
            } else {
                JOptionPane.showMessageDialog(null, "Hatalı e-posta veya şifre. İşlem gerçekleştirilemedi.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Lütfen silmek istediğiniz skoru seçin.");
        }
    }//GEN-LAST:event_deleteButtonActionPerformed


    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        backFrame.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_backButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable scoreTable;
    // End of variables declaration//GEN-END:variables
}
